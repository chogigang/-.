package org.opentutorials.javatutorials.polymorphism;
interface I2{
    public String A();//A라고 하는 메소드의 정의를 강제하고있다
}
interface I3{
    public String B();//B라고 하는 메소드의 정의를 강제하고있다.

}
class D implements I2, I3{
    public String A(){
        return "A";
    }
    public String B(){
        return "B";
    }
}
public class PolymorphismDemo3 {
    public static void main(String[] args) {
        D obj = new D();//D라고 하는 클래스를 오브젝트라고 하는 변수로 인스턴스 시켯다 데이터 타입은 D를 지정 클래스와 데이터 타입이 동일하다

        I2 objI2 = new D(); //D라고 하는 클래스를 오브젝트2를 인스턴스 하였는데 그 데이터 타입은 I2다 I2는 클래스d 뒤에서 구현한 인터페이스 중의 하나인 I2를 의미

        I3 objI3 = new D();//D라고 하는 클래스를 오브젝트2를 인스턴스 하였는데 그 데이터 타입은 I3다 I3는 클래스d 뒤에서 구현한 인터페이스 중의 하나인 I3를 의미

         
        obj.A();
        obj.B();
         
        objI2.A();
        //objI2.B();  objI2는 데이터타입이 I2를 를 행세 하고있기때문에 I2에 없는 B메소드를 호출하면 에러가뜬다.

         
        //objI3.A(); objI3는 데이터타입이 I3를 를 행세 하고있기때문에 I3에 없는 A메소드를 호출하면 에러가뜬다.

        objI3.B();
    }
}


/*조금더 복잡한 예제를 살펴보자 이걸통해 인터페이스 라는것이 다항성에 어덯게
 * 기여하는가 또 인터페이스가 어떻게 클래스가 할수없는일을 할수있는가에 대해서 
 * 살펴볼수 있다.
 * 어떤 클래스의 데이터 타입으로 어떠한 인터페이스를 사용한다는것은 마치 그클래스가
 * 그 인터페이스에서 정의하고 있는 멤버들만으로 가지고있는 클래스인것처럼 사용할 수 있게 된다.
 * 
 * 인터페이스를 이렇게 지정한다 라는 것은 위 인터페이스가 2개가 있는데 그리고 이 클래스가 두
 * 개의 인터페이스 를 사용하고 있다는게 무슨 뜻이나면 이 각각의 인터페이스들은 
 * 인터페이스로 그룹핑 되어있는 서로 연관되어 있는 어떠한 메소드나 필드 들의 집합이라는 뜻이다.
 * 
 * 어떤 클래스를 사용할때 그 클래스가 갖고 있는 모든 기능을 사용해야 된다면   D obj = new D();
 * 처럼 그 클래스의 데이터 타입으로 지정을 해야 겠지만 만약 어떠한 클래스를 사용할때 그클래스가 갖고
 * 있는 여러가지 기능중에서 어떤 특정한 인터페이스의 기능만 사용한다고 한다면 데이터 타입으로 그
 * 인스턴스 인터페이스를 지정 하면 그 인터페이스에서 정의하고 있는 멤버들을  제외한 나머지것들은
 * 이클래스를 사용하는 사람이 신경 쓰지 않도록 사용할수있게 된다.
 * */
