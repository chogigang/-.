package org.opentutorials.javatutorials.scope;
 
public class ScopeDemo5 {
    public static void main(String[] args) {
        for (int i = 0; i < 5; i++) {
            System.out.println(i);
        }
        // System.out.println(i);
    }
 
}

/*정리🧹

1. main 메소드부터 확인한다 -> a 메소드를 호출하고 있다.
2. a 메소드 확인한다 -> a메소드 지역 내에서 i=10을 할당한다. -> b 메소드를 호출한다.
3. b 메소드 확인한다 -> i의 값을 출력한다.
4. 출력값 = "지역변수(b 메소드 내 할당한) i의 값"이거나 "전역변수(static int i = 5) i의 값" 둘 중 한 쪽이다!
5. "지역변수의 값"과 "전역변수의 값" 모두 존재하는 경우 -> 지역변수의 값이 출력됨.
    "지역변수의 값" O / "전역변수의 값" X -> 지역변수의 값 출력.
    "지역변수의 값" X / "전역변수의 값" O -> 전역변수의 값 출력.
    둘 다 없으면 -> Error🤗

즉, b 메소드의 유효범위는 "b 자기 자신(b 지역 변수)"이거나 "전역 변수" 둘 중 한 쪽 범위에서 접근이 가능하다!
b 메소드를 누가 호출하든지 상관이 없다.

✓지역변수와 전역변수가 중첩이 될 때의 장점
1. 전역변수는 모든 메소드나 지역변수에서 공통적으로 사용할 수 있는 기본값이 된다.
2. 특정 지역변수 내에서만 선언한 변수(i)의 값을 변경하고 싶을 때 변경이 가능하다.(지역변수 우선순위)*/